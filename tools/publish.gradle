apply plugin: "maven-publish"

afterEvaluate { project ->
    def isAndroidProject = project.plugins.hasPlugin('com.android.application') || project.plugins.hasPlugin('com.android.library')
    // To avoid uploading the default empty jar artifact in the project root directory, we use a custom
    // configuration to specify which artifacts we want to upload.
    publishing {
        publications {
            mavenJava(MavenPublication) {

                // Dependencies are only automatically included by the release plugin if the release
                // variant is built. Since we've disabled the release variant to improve build
                // times, we need to add the dependencies to the pom file explicitly.
                 if (isAndroidProject) {
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def groupId = it.group
                            def artifactId = it.name
                            // If we specify an artifact id that differs from the project name, it won't
                            // match. To avoid that, we look up the artifact id (and group) by property
                            // for any project dependencies.
                            // TODO: there must be a neater way to do this.
                            if (it instanceof ProjectDependency) {
                                def properties = it.getDependencyProject().getProperties()
                                groupId = it.group
                            }
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', groupId)
                            dependencyNode.appendNode('artifactId', artifactId)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }
                }

                pom {
                    if (isAndroidProject) {
                        packaging = "aar"
                    } else {
                        packaging = "jar"
                    }
                    if (isAndroidProject) {
                        version = "${android.defaultConfig.versionName}"
                    }
                }

                if (isAndroidProject) {
                    def variants = project.android.libraryVariants.findAll {
                        it.buildType.name.equalsIgnoreCase('release')
                    }

                    def getAndroidSdkDirectory = project.android.sdkDirectory

                    def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"

                    task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
                        source = variants.collect { it.getJavaCompileProvider().get().source }
                        classpath = files(
                                getAndroidJar,
                                project.file("build/intermediates/javac/release/classes")
                        )
                        doFirst {
                            classpath += files(variants.collect { it.getJavaCompileProvider().get().classpath.files })
                        }
                        options {
                            links("http://docs.oracle.com/javase/7/docs/api/")
                            links("http://d.android.com/reference")
                        }

                        exclude '**/R.java'
                    }

                    def cleanJavadocTask = task("cleanJavadocTask", type: Delete) {
                        delete androidJavadocs.destinationDir
                    } as Task
                    project.clean.dependsOn(cleanJavadocTask)

                    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                        archiveClassifier.set('javadoc')
                        from androidJavadocs.destinationDir
                        archiveBaseName.set("${project.name}")
                    }

                    task androidSourcesJar(type: Jar) {
                        archiveClassifier.set('sources')
                        from android.sourceSets.main.java.srcDirs
                        archiveBaseName.set("${project.name}")
                    }

                    task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
                        from compileReleaseJavaWithJavac.destinationDir
                        exclude '**/R.class'
                        exclude '**/R$*.class'
                        archiveBaseName.set("${project.name}")
                    }

                    artifact androidLibraryJar
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                    artifact project.tasks.bundleReleaseAar
                } else if (project.plugins.hasPlugin('java')) {

                    task sourcesJar(type: Jar, dependsOn: classes) {
                        archiveClassifier.set('sources')
                        from sourceSets.main.allSource
                    }

                    task javadocsJar(type: Jar, dependsOn: javadoc) {
                        archiveClassifier.set('javadoc')
                        from javadoc.destinationDir
                    }

                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }
}
